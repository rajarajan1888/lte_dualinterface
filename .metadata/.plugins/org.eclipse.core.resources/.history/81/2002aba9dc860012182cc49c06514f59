/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2011 Centre Tecnologic de Telecomunicacions de Catalunya (CTTC)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Jaume Nin <jaume.nin@cttc.cat>
 */

#include "ns3/lte-advanced-helper.h"
#include "ns3/epc-helper.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/internet-module.h"
#include "ns3/mobility-module.h"
#include "ns3/lte-module.h"
#include "ns3/applications-module.h"
#include "ns3/point-to-point-helper.h"
#include "ns3/config-store.h"
//#include "ns3/gtk-config-store.h"

using namespace ns3;

/**
 * Sample simulation script for LTE+EPC. It instantiates several eNodeB,
 * attaches one UE per eNodeB starts a flow for each UE to  and from a remote host.
 * It also  starts yet another flow between each UE pair.
 */
NS_LOG_COMPONENT_DEFINE ("EpcFirstExample");
int
main (int argc, char *argv[])
{

  uint16_t noOfeNBs = 1;
  uint16_t noOfUEspereNB = 10;
  uint16_t ueDist = 100;
  double simTime = 5.0;
  //double interPacketInterval = 10;

  // Command line arguments
  CommandLine cmd;
  cmd.AddValue("noOfeNBs", "Number of eNodeBs", noOfeNBs);
  cmd.AddValue("noOfUEspereNB", "Number of UEs per eNB", noOfUEspereNB);
  //cmd.AddValue("numberOfNodes", "Number of eNodeBs + UE pairs", numberOfNodes);
  cmd.AddValue("simTime", "Total duration of the simulation [s])", simTime);
    //cmd.AddValue("interPacketInterval", "Inter packet interval [ms])", interPacketInterval);
  cmd.Parse(argc, argv);

  Ptr<LteHelper> lteAdvancedHelper = CreateObject<LteAdvancedHelper> ();
  Ptr<EpcHelper>  epcHelper = CreateObject<EpcHelper> ();
  lteAdvancedHelper->SetEpcHelper (epcHelper);
  lteAdvancedHelper->SetSchedulerType("ns3::PfFfMacScheduler");

  std::string outputpath = "att_workspace";

  Config::SetDefault ("ns3::RadioBearerStatsCalculator::DlRlcOutputFilename", StringValue (outputpath+"/DlRlcStatsatt.txt"));
  Config::SetDefault ("ns3::RadioBearerStatsCalculator::UlRlcOutputFilename", StringValue (outputpath+"/UlRlcStatsatt.txt"));
  Config::SetDefault ("ns3::RadioBearerStatsCalculator::DlPdcpOutputFilename", StringValue (outputpath+"/DlPdcpStatsatt.txt"));
  Config::SetDefault ("ns3::RadioBearerStatsCalculator::UlPdcpOutputFilename", StringValue (outputpath+"/UlPdcpStatsatt.txt"));
  Config::SetDefault ("ns3::MacStatsCalculator::DlOutputFilename", StringValue (outputpath+"/DlMacStatsatt.txt"));
  Config::SetDefault ("ns3::MacStatsCalculator::UlOutputFilename", StringValue (outputpath+"/UlMacStatsatt.txt"));

  Config::SetDefault ("ns3::LteEnbPhy::TxPower", DoubleValue (43));
  Config::SetDefault ("ns3::LteUePhy::TxPower", DoubleValue(23));
  Config::SetDefault ("ns3::LteAmc::AmcModel", EnumValue (LteAmc::PiroEW2010));

   lteAdvancedHelper->SetEnbAntennaModelType ("ns3::IsotropicAntennaModel");
   lteAdvancedHelper->SetEnbDeviceAttribute ("DlEarfcn", UintegerValue (200));
   lteAdvancedHelper->SetEnbDeviceAttribute ("UlEarfcn", UintegerValue (200 + 18000));
   lteAdvancedHelper->SetEnbDeviceAttribute ("DlBandwidth", UintegerValue (100));

   //DL EARFCN - 5780 ; UL EARFCN - Default + 18000
   // 50 RBs - 10 MHz
   lteAdvancedHelper->SetEnbDeviceAttribute ("UlBandwidth", UintegerValue (100));
   lteAdvancedHelper->SetPathlossModelType("ns3::LogDistancePropagationLossModel");
   //ConfigStore inputConfig;
   //inputConfig.ConfigureDefaults();

   lteAdvancedHelper->SetAttribute ("FadingModel", StringValue ("ns3::TraceFadingLossModel"));

   std::ifstream ifTraceFile;
   ifTraceFile.open ("../../src/lte/model/fading-traces/fading_trace_EPA_3kmph.fad", std::ifstream::in);
   if (ifTraceFile.good ())
     {
       // script launched by test.py
       lteAdvancedHelper->SetFadingModelAttribute ("TraceFilename", StringValue ("../../src/lte/model/fading-traces/fading_trace_EPA_3kmph.fad"));
     }
   else
     {
       // script launched as an example
       lteAdvancedHelper->SetFadingModelAttribute ("TraceFilename", StringValue ("src/lte/model/fading-traces/fading_trace_EPA_3kmph.fad"));
     }

  //ConfigStore inputConfig;
  //inputConfig.ConfigureDefaults();

  // parse again so you can override default values from the command line
  cmd.Parse(argc, argv);

  Ptr<Node> pgw = epcHelper->GetPgwNode ();

   // Create a single RemoteHost
  NodeContainer remoteHostContainer;
  remoteHostContainer.Create (1);
  Ptr<Node> remoteHost = remoteHostContainer.Get (0);
  InternetStackHelper internet;
  internet.Install (remoteHostContainer);

  // Create the Internet
  PointToPointHelper p2ph;
  p2ph.SetDeviceAttribute ("DataRate", DataRateValue (DataRate ("100Gb/s")));
  p2ph.SetDeviceAttribute ("Mtu", UintegerValue (1500));
  p2ph.SetChannelAttribute ("Delay", TimeValue (Seconds (0.010)));
  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
  Ipv4AddressHelper ipv4h;
  ipv4h.SetBase ("1.0.0.0", "255.0.0.0");
  Ipv4InterfaceContainer internetIpIfaces = ipv4h.Assign (internetDevices);
  // interface 0 is localhost, 1 is the p2p device
  Ipv4Address remoteHostAddr = internetIpIfaces.GetAddress (1);

  Ipv4StaticRoutingHelper ipv4RoutingHelper;
  Ptr<Ipv4StaticRouting> remoteHostStaticRouting = ipv4RoutingHelper.GetStaticRouting (remoteHost->GetObject<Ipv4> ());
  remoteHostStaticRouting->AddNetworkRouteTo (Ipv4Address ("7.0.0.0"), Ipv4Mask ("255.0.0.0"), 1);

  NodeContainer ueNodes;
  NodeContainer enbNodes;
  enbNodes.Create(noOfeNBs);
  ueNodes.Create(noOfeNBs*noOfUEspereNB);

  // Install Mobility Model
  Ptr<ListPositionAllocator> eNBpositionAlloc = CreateObject<ListPositionAllocator> ();
  Ptr<ListPositionAllocator> UEpositionAlloc = CreateObject<ListPositionAllocator> ();


	for(uint16_t j = 0; j < noOfUEspereNB ; j++)
      //UEpositionAlloc->Add (Vector(((eNBdistance * i)+(ueDist*j)), 0, 0));
	  UEpositionAlloc->Add (Vector((ueDist*j), 0, 0));


  MobilityHelper mobility;
  mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
  mobility.SetPositionAllocator(eNBpositionAlloc);
  mobility.SetPositionAllocator(UEpositionAlloc);
  mobility.Install(enbNodes);
  mobility.Install(ueNodes);


  /*Ptr<MobilityModel> MM;

  MM = enbNodes.Get(0) -> GetObject<MobilityModel>();
  MM -> SetPosition(Vector3D(0,0,0));
  MM = ueNodes.Get(0) -> GetObject<MobilityModel>();
  MM -> SetPosition(Vector3D(0,0,0));
  std::cout <<Simulator::Now().GetSeconds () <<": UE" <<": "<< MM -> GetPosition().x <<"," << MM -> GetPosition().y <<"," << MM -> GetPosition().z << std::endl;*/

  // Install LTE Devices to the nodes
  NetDeviceContainer enbLteDevs = lteAdvancedHelper->InstallEnbDevice (enbNodes);
  NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);

  // Install the IP stack on the UEs
  internet.Install (ueNodes);
  Ipv4InterfaceContainer ueIpIface;
  ueIpIface = epcHelper->AssignUeIpv4Address (NetDeviceContainer (ueLteDevs));
  // Assign IP address to UEs, and install applications
  for (uint32_t u = 0; u < ueNodes.GetN (); ++u)
    {
      Ptr<Node> ueNode = ueNodes.Get (u);
      // Set the default gateway for the UE
      Ptr<Ipv4StaticRouting> ueStaticRouting = ipv4RoutingHelper.GetStaticRouting (ueNode->GetObject<Ipv4> ());
      ueStaticRouting->SetDefaultRoute (epcHelper->GetUeDefaultGatewayAddress (), 1);
    }

  // Attach one UE per eNodeB
  for (uint16_t i = 0; i < noOfeNBs; i++)
      {
	    for(uint16_t j = 0; j < noOfUEspereNB ; j++)
        lteHelper->Attach (ueLteDevs.Get((i*noOfUEspereNB)+j), enbLteDevs.Get(i));
        // side effect: the default EPS bearer will be activated
      }


  // Install and start applications on UEs and remote host
  uint16_t dlPort = 1234;
 // uint16_t ulPort = 2000;
 // uint16_t otherPort = 3000;
  PacketSinkHelper dlPacketSinkHelper ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), dlPort));
//  PacketSinkHelper ulPacketSinkHelper ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), ulPort));
//  PacketSinkHelper packetSinkHelper ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), otherPort));
  ApplicationContainer clientApps;
  ApplicationContainer serverApps;
  for (uint32_t u = 0; u < ueNodes.GetN (); ++u)
    {
  //    ++ulPort;
  //    ++otherPort;
      serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get(u)));
  //    serverApps.Add (ulPacketSinkHelper.Install (remoteHost));
  //    serverApps.Add (packetSinkHelper.Install (ueNodes.Get(u)));

      UdpClientHelper dlClient (ueIpIface.GetAddress (u), dlPort);
      dlClient.SetAttribute("Interval", TimeValue (MilliSeconds(10)));
      dlClient.SetAttribute("PacketSize", UintegerValue(1000));
      dlClient.SetAttribute ("MaxPackets", UintegerValue(100000));

     /* UdpClientHelper ulClient (remoteHostAddr, ulPort);
      ulClient.SetAttribute ("Interval", TimeValue (MilliSeconds(interPacketInterval)));
      ulClient.SetAttribute ("MaxPackets", UintegerValue(1000000));

      UdpClientHelper client (ueIpIface.GetAddress (u), otherPort);
      client.SetAttribute ("Interval", TimeValue (MilliSeconds(interPacketInterval)));
      client.SetAttribute ("MaxPackets", UintegerValue(1000000));*/

      clientApps.Add (dlClient.Install (remoteHost));
//      clientApps.Add (ulClient.Install (ueNodes.Get(u)));
/*      if (u+1 < ueNodes.GetN ())
        {
          clientApps.Add (client.Install (ueNodes.Get(u+1)));
        }
      else
        {
          clientApps.Add (client.Install (ueNodes.Get(0)));
        }*/
    }
  serverApps.Start (Seconds (0.01));
  clientApps.Start (Seconds (0.01));
  lteHelper->EnableTraces ();
  lteHelper->EnableMacTraces ();
  lteHelper->EnableRlcTraces ();
  // Uncomment to enable PCAP tracing
  //p2ph.EnablePcapAll("lena-epc-first");

  Simulator::Stop(Seconds(simTime));
  Simulator::Run();

  /*GtkConfigStore config;
  config.ConfigureAttributes();*/

  Simulator::Destroy();
  return 0;

}

