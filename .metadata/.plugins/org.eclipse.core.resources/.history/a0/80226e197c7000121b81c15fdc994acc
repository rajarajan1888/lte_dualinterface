/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2011 Centre Tecnologic de Telecomunicacions de Catalunya (CTTC)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Jaume Nin <jaume.nin@cttc.cat>
 */

#include "ns3/lte-helper.h"
#include "ns3/epc-helper.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/internet-module.h"
#include "ns3/mobility-module.h"
#include "ns3/lte-module.h"
#include "ns3/applications-module.h"
#include "ns3/point-to-point-helper.h"
#include "ns3/config-store.h"
//#include "ns3/gtk-config-store.h"

using namespace ns3;

/**
 * Sample simulation script for LTE+EPC. It instantiates several eNodeB,
 * attaches one UE per eNodeB starts a flow for each UE to  and from a remote host.
 * It also  starts yet another flow between each UE pair.
 */
NS_LOG_COMPONENT_DEFINE ("EpcFirstExample");

Vector
GetCurrentPosition(Ptr<Node> node)
{
  Ptr<MobilityModel> MM = node -> GetObject<MobilityModel>();
  return MM -> GetPosition();
}

static void
RelocateUEinHeNB(NodeContainer nodes)
{
  Ptr<MobilityModel> MM;
  Vector pos;
  Ptr<Node> node;

  node = nodes.Get(0);
  pos = GetCurrentPosition(node);
  MM = node -> GetObject<MobilityModel>();
  MM -> SetPosition(Vector3D(pos.x+1, pos.y, pos.z));
  //VM = UEinHeNB.Get(0) -> GetObject<ConstantVelocityMobilityModel>();std::cout << "AAAAAAAAAaa" <<std::endl;
  //VM -> SetVelocity(Vector3D(-5,0.0,0.0));
  std::cout << Simulator::Now().GetSeconds () <<": Node " << node->GetId() <<": "<< MM -> GetPosition().x <<"," << MM -> GetPosition().y <<"," << MM -> GetPosition().z << std::endl;
  Simulator::Schedule (Seconds (10.0), &RelocateUEinHeNB, nodes);
}


int
main (int argc, char *argv[])
{

  //uint16_t numberOfNodes = 2;
  double simTime = 5000.0;
  std::string outputpath = "";
  //double distance = 60.0;
  //double interPacketInterval = 100;

  // Command line arguments
  CommandLine cmd;
  //cmd.AddValue("numberOfNodes", "Number of eNodeBs + UE pairs", numberOfNodes);
  cmd.AddValue("simTime", "Total duration of the simulation [s])", simTime);
  cmd.AddValue("outputpath", "The path of the stats outputs", outputpath);
  //cmd.AddValue("distance", "Distance between eNBs [m]", distance);
  //cmd.AddValue("interPacketInterval", "Inter packet interval [ms])", interPacketInterval);
  cmd.Parse(argc, argv);

  Config::SetDefault ("ns3::RadioBearerStatsCalculator::DlRlcOutputFilename", StringValue (outputpath+"/DlRlcStats.txt"));
  Config::SetDefault ("ns3::RadioBearerStatsCalculator::UlRlcOutputFilename", StringValue (outputpath+"/UlRlcStats.txt"));
  Config::SetDefault ("ns3::RadioBearerStatsCalculator::DlPdcpOutputFilename", StringValue (outputpath+"/DlPdcpStats.txt"));
  Config::SetDefault ("ns3::RadioBearerStatsCalculator::UlPdcpOutputFilename", StringValue (outputpath+"/UlPdcpStats.txt"));
  Config::SetDefault ("ns3::MacStatsCalculator::DlOutputFilename", StringValue (outputpath+"/DlMacStats.txt"));
  Config::SetDefault ("ns3::MacStatsCalculator::UlOutputFilename", StringValue (outputpath+"/UlMacStats.txt"));


  Ptr<LteHelper> lteHelper = CreateObject<LteHelper> ();
  Ptr<EpcHelper>  epcHelper = CreateObject<EpcHelper> ();
  lteHelper->SetEpcHelper (epcHelper);
  lteHelper->SetSchedulerType("ns3::PfFfMacScheduler");
  Config::SetDefault ("ns3::LteEnbPhy::TxPower", DoubleValue (43));
  Config::SetDefault ("ns3::LteUePhy::TxPower", DoubleValue (43));
  lteHelper->SetEnbAntennaModelType ("ns3::IsotropicAntennaModel");
  lteHelper->SetEnbDeviceAttribute ("DlEarfcn", UintegerValue (200));
  lteHelper->SetEnbDeviceAttribute ("UlEarfcn", UintegerValue (200 + 18000));
  lteHelper->SetEnbDeviceAttribute ("DlBandwidth", UintegerValue (100));
  lteHelper->SetEnbDeviceAttribute ("UlBandwidth", UintegerValue (100));

  ConfigStore inputConfig;
  inputConfig.ConfigureDefaults();

  // parse again so you can override default values from the command line
  cmd.Parse(argc, argv);

  Ptr<Node> pgw = epcHelper->GetPgwNode ();

   // Create a single RemoteHost
  NodeContainer remoteHostContainer;
  remoteHostContainer.Create (1);
  Ptr<Node> remoteHost = remoteHostContainer.Get (0);
  InternetStackHelper internet;
  internet.Install (remoteHostContainer);

  // Create the Internet
  PointToPointHelper p2ph;
  p2ph.SetDeviceAttribute ("DataRate", DataRateValue (DataRate ("100Gb/s")));
  p2ph.SetDeviceAttribute ("Mtu", UintegerValue (1500));
  p2ph.SetChannelAttribute ("Delay", TimeValue (Seconds (0.010)));
  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
  Ipv4AddressHelper ipv4h;
  ipv4h.SetBase ("1.0.0.0", "255.0.0.0");
  Ipv4InterfaceContainer internetIpIfaces = ipv4h.Assign (internetDevices);
  // interface 0 is localhost, 1 is the p2p device
  //Ipv4Address remoteHostAddr = internetIpIfaces.GetAddress (1);

  Ipv4StaticRoutingHelper ipv4RoutingHelper;
  Ptr<Ipv4StaticRouting> remoteHostStaticRouting = ipv4RoutingHelper.GetStaticRouting (remoteHost->GetObject<Ipv4> ());
  remoteHostStaticRouting->AddNetworkRouteTo (Ipv4Address ("7.0.0.0"), Ipv4Mask ("255.0.0.0"), 1);

  NodeContainer ueNodes;
  NodeContainer enbNodes;
  enbNodes.Create(1);
  ueNodes.Create(1);

  // Install Mobility Model

  MobilityHelper mobility;
  mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");

  mobility.Install(enbNodes);
  mobility.Install(ueNodes);

  Ptr<MobilityModel> MM;

  MM = enbNodes.Get(0) -> GetObject<MobilityModel>();
  MM -> SetPosition(Vector3D(0,0,0));
  MM = ueNodes.Get(0) -> GetObject<MobilityModel>();
  MM -> SetPosition(Vector3D(0,0,0));
  std::cout <<Simulator::Now().GetSeconds () <<": UE" <<": "<< MM -> GetPosition().x <<"," << MM -> GetPosition().y <<"," << MM -> GetPosition().z << std::endl;

  // Install LTE Devices to the nodes
  NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);
  NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);

  // Attach one UE per eNodeB
  for (uint16_t i = 0; i < 1; i++)
      {
        lteHelper->Attach (ueLteDevs.Get(i), enbLteDevs.Get(i));
      }

  // Install the IP stack on the UEs
  internet.Install (ueNodes);
  Ipv4InterfaceContainer ueIpIface;
  ueIpIface = epcHelper->AssignUeIpv4Address (NetDeviceContainer (ueLteDevs));
  // Assign IP address to UEs, and install applications

  // Install and start applications on UEs and remote host
  uint16_t dlPort = 1234;
  Ptr<Ipv4StaticRouting> ueStaticRouting;
  Ptr<Ipv4> ueIpv4;
  int32_t interface;
  Ipv4Address ueAddr;
  ApplicationContainer onOffApp;

  ueStaticRouting = ipv4RoutingHelper.GetStaticRouting (ueNodes.Get(0)->GetObject<Ipv4>());
  ueStaticRouting->SetDefaultRoute (epcHelper->GetUeDefaultGatewayAddress (), 1);
  ueIpv4 = ueNodes.Get(0)->GetObject<Ipv4> ();
  interface =  ueIpv4->GetInterfaceForDevice (ueNodes.Get(0)->GetDevice (0)->GetObject <LteUeNetDevice> ());
  NS_ASSERT (interface >= 0);
  NS_ASSERT (ueIpv4->GetNAddresses (interface) == 1);
  ueAddr = ueIpv4->GetAddress (interface, 0).GetLocal ();

      OnOffHelper onOffHelper_1("ns3::UdpSocketFactory", InetSocketAddress(ueAddr, dlPort));
      onOffHelper_1.SetAttribute("OnTime", StringValue ("ns3::ConstantRandomVariable[Constant=5000]"));
      onOffHelper_1.SetAttribute("OffTime", StringValue ("ns3::ConstantRandomVariable[Constant=0]"));
      onOffHelper_1.SetAttribute("DataRate", DataRateValue(DataRate("35Mbps")));
      onOffHelper_1.SetAttribute("PacketSize", UintegerValue(1000));
      onOffApp.Add(onOffHelper_1.Install(remoteHost));

  lteHelper->ActivateDedicatedEpsBearer (ueLteDevs, EpsBearer (EpsBearer::GBR_CONV_VIDEO), EpcTft::Default ());
  lteHelper->EnableTraces ();
  // Uncomment to enable PCAP tracing
  //p2ph.EnablePcapAll("lena-epc-first");
  Simulator::Schedule (Seconds (10.0), &RelocateUEinHeNB, ueNodes);
  Simulator::Stop(Seconds(simTime));
  Simulator::Run();

  /*GtkConfigStore config;
  config.ConfigureAttributes();*/

  Simulator::Destroy();
  return 0;

}
